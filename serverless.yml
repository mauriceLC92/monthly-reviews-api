useDotenv: true

service: monthly-reviews-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  environment:
    USER_POOL_ID: !Ref MagicLinkUserPool
  region: ${opt:region, 'us-east-1'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource: !GetAtt MonthlyReviewsTable.Arn
    - Effect: "Allow"
      Action:
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminUpdateUserAttributes
      Resource: !GetAtt MagicLinkUserPool.Arn

custom:
  stage: ${opt:stage, 'dev'}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get

  login:
    handler: handler.login
    events:
      - http:
          path: /login
          method: post
    environment:
      URL:
        {
          "Fn::Join":
            [
              "",
              [
                "https://",
                { "Ref": "ApiGatewayRestApi" },
                ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}",
              ],
            ],
        }
  # 1. Define auth challenge (letting Cognito know that we have a custom challenge)
  define-auth-challenge:
    handler: api/define-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: DefineAuthChallenge
          existing: true

  # 2. Create the actual auth challenge
  create-auth-challenge:
    handler: api/create-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: CreateAuthChallenge
          existing: true

  # 3. Verify auth challenge
  verify-auth-challenge:
    handler: api/verify-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: VerifyAuthChallengeResponse
          existing: true

  getReviewById:
    handler: handler.getReviewById
    events:
      - http:
          path: /review
          method: get
    environment:
      MONTHLY_REVIEWS_TABLE: !Ref MonthlyReviewsTable

  getUserById:
    handler: handler.getUserById
    events:
      - http:
          path: /users
          method: get
    environment:
      USERS_TABLE: !Ref UsersTable

resources:
  - ${file(./resources.yml)}

plugins:
  - serverless-esbuild
